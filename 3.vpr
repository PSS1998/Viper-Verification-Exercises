field left: Ref
field right: Ref
field parent: Ref
field data: Int
field mark: Bool
field turn: Int

// size of the tree; number of nodes
function size(this: Ref, root: Ref, nodes: Set[Ref]) : Int 
    requires bt(this, root, nodes)
    ensures result >= 0
{
    this == null ? 0 : unfolding bt(this, root, nodes) in (1 + size(this.right, root, nodes) + size(this.left, root, nodes))
}


// Binary tree predicate

// nodes is a ghost variable that holds a set of all nodes in the tree
// it could potentially be used for verifying some of the properties

predicate bt(this: Ref, original_root: Ref, nodes: Set[Ref]) {
    (this != null) ==> (
        acc(this.left) && acc(this.right) && acc(this.data)  && acc(this.parent) && acc(this.mark) &&
        this in nodes &&

        // the only case when parent is null is when we are at root when root has not gone through any rotation or at the end        
        ((this.parent == null) ==> (this == original_root)) &&

        // checks for any node, and root with parent == null (which happens when root has not gone through any rotation or at the end)
        (((this != original_root) || (this.parent == null)) ==> (
        (bt(this.parent, original_root, nodes)) &&
        (bt(this.right, original_root, nodes)) && 
        (bt(this.left, original_root, nodes)) &&
        ((this.right == null ==> this.left == null) &&
        (this.left == null ==> this.right == null))) &&
        this.left in nodes && this.right in nodes && this.parent in nodes
        ) &&

        // if we are at root, but parent is not null, so the root has already gone through rotation,
        // don't check if each node has either zero or two children
        (((this == original_root) && (this.parent != null)) ==> (
        (bt(this.parent, original_root, nodes)) &&
        (bt(this.right, original_root, nodes)) && 
        (bt(this.left, original_root, nodes)) &&
        this.left in nodes && this.right in nodes && this.parent in nodes
        )
        // ((this.right == null ==> this.left == null) &&
        // (this.left == null ==> this.right == null)))
        )
    ) 
}


// Next method proves the following properties:
// (1) The implementation is memory safe.
// (2) The resulting data structure is again a binary tree with parent pointers.


// The following property can be considered proved depending on the interpretation:
// (3) The resulting tree contains the same nodes as the initial tree. 

// explanation: we know that the tree contains the same nodes (since we ensure bt(root, root, nodes)), 
// but we cannot prove that the tree size didn't change, therefore we know that 
// every node from new tree will be in the old tree, but not (necessarily) every node from old tree will be in the new tree

method markTree(root: Ref, nodes: Set[Ref])
    requires bt(root, root, nodes) && root != null
    requires |nodes| == size(root, root, nodes)
    ensures root in nodes
    ensures bt(root, root, nodes)
{
    unfold bt(root, root, nodes)

    var x: Ref
    var y: Ref
    x := root

    // declare a new variable z that will hold x of previous iteration
    // so at the beginning z == root, and in the loop z.parent == x
    var z: Ref

    // this is a do-while loop; we have extracted the first iteration
    x.mark := true
    if (x.left == null && x.right == null) {
        y := x.parent
    }else{
        y := x.left

        x.left := x.right
        x.right := x.parent
        x.parent := y
    }

    z := x
    x := y

    // folding the parent
    fold bt(z, root, nodes)


    while (x != null)
        invariant bt(z, root, nodes)
        invariant (x != null) ==> x in nodes
        invariant z!=null
        invariant ( x!=null)==> (unfolding bt(z, root, nodes) in z.parent == x)
        invariant (x == null) ==> z == root
    {
        // unfolding the parent (z) first to have access to the child (x)
        unfold bt(z, root, nodes)
        unfold bt(x, root, nodes)
        x.mark := true

        if (x.left == null && x.right == null) {
            y := x.parent
        }else{
            y := x.left
            x.left := x.right
            x.right := x.parent
            x.parent := y
        }

        z := x
        x := y

        // folding the parent
        fold bt(z, root, nodes)
    }
}


// Next properties were not verified:
//
// (4) The shape of the resulting tree is the same as the initial tree, i.e. every node points to the same nodes as in the original tree.
// (5) All nodes in the resulting tree are marked.
// (6) The implementation visits the nodes of the initial tree in-order.


// (4): the easiest way to implement such a shape function would be by recursion, but this way it is very difficult 
// to argue about the shape of the whole tree, since we'd only see a parent and two children nodes at once. 

// (5): it is difficult to prove that all nodes are marked, since we may visit some of the nodes more than once, 
// and the order in which we visit the tree is not easily defined.

// (6): to prove this property, we'd need to implement a function that visits the nodes in-order,
// but it was proven difficult via trial and error. 
