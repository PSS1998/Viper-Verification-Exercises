// We prove every part of this task

predicate time_credit()
method consume_time_credit()
    requires time_credit()

// PART 1: Binary search tree predicate
//
// Define a predicate for a binary search tree. You may define new fields and
// additional predicates. You may add arguments or heap-based functions for
// abstraction.
// predicate bst(...) {
//     ...
// }

field left: Ref
field right: Ref
field value: Int
field min: Int
field max: Int

// Max of a node is equal to the max of the right subtree or the value of current node if right subtree is null
// Min of a node is equal to the min of the left subtree or the value of current node if left subtree is null
// We prove sortedness in predicate by checking that each value is greater and equal of the value of the node on left and less and equal of the node on right
predicate bst(this: Ref) {
    (this != null) ==> (
        acc(this.left) && acc(this.right) && acc(this.value) && acc(this.max) && acc(this.min) &&
        (this.right != null ==> bst(this.right) && (unfolding bst(this.right) in this.max == this.right.max) && (unfolding bst(this.right) in this.value <= this.right.value) ) && 
        (this.left != null ==> bst(this.left) && (unfolding bst(this.left) in this.min == this.left.min) && (unfolding bst(this.left) in this.value >= this.left.value)) &&
        (this.right == null ==> this.max == this.value) &&
        (this.left == null ==> this.min == this.value) &&
        this.value >= this.min && this.value <= this.max
    )
}

define optHeight(t) (
    t == null ? 0 : 1 + depth(t)
)

define max_math(a,b) (
    (a > b ? a : b)
)

function depth(this: Ref): Int
    requires this != null ==> bst(this)
    ensures result >= 0
{
    this == null ? 0 : 
    (unfolding bst(this) in max_math(optHeight(this.left), optHeight(this.right)))
}

function get_max(this: Ref): Int
    requires this != null
    requires bst(this)
{
    (unfolding bst(this) in this.max)
}

function get_min(this: Ref): Int
    requires this != null
    requires bst(this)
{
    (unfolding bst(this) in this.min)
}

function get_value(this: Ref): Int
    requires this != null
    requires bst(this)
{
    (unfolding bst(this) in this.value)
}

function is_null(this: Ref): Bool
    requires bst(this)
{
    (this == null) ? true : false
}

// PART 2: BST insertion method
//
// Use the bst predicate you defined to implement a method which inserts a
// value into the given tree.
method bst_insert(tree: Ref, val: Int)
    requires bst(tree)
    requires acc(time_credit(), (depth(tree)+1)/1)
    ensures bst(tree)
    ensures old(!is_null(tree)) ==> (get_max(tree) >= old(get_max(tree)))
    ensures old(!is_null(tree)) ==> (get_min(tree) <= old(get_min(tree)))
    ensures old(!is_null(tree)) ==> (get_value(tree) == old(get_value(tree)))
{
    consume_time_credit()
    unfold bst(tree)
    
    if (tree == null){
        inhale acc(tree.value)
        inhale acc(tree.max)
        inhale acc(tree.min)
        tree.value := val
        tree.max := val
        tree.min := val
    }
    else{
        if (val > tree.value){
            if (tree.right != null){
                bst_insert(tree.right, val)
                tree.max := unfolding bst(tree.right) in tree.right.max
            }
            else{
                var new_tree : Ref := new(*)
                new_tree.value := val
                new_tree.left := null
                new_tree.right := null
                new_tree.min := val
                new_tree.max := val

                fold bst(new_tree)

                tree.right := new_tree
                tree.max := val
            }
        }
        else{
            if (tree.left != null){
                bst_insert(tree.left, val)
                tree.min := unfolding bst(tree.left) in tree.left.min
            }
            else{
                assert val <= tree.value
                var new_tree : Ref := new(*)
                new_tree.value := val
                new_tree.left := null
                new_tree.right := null
                new_tree.min := val
                new_tree.max := val

                fold bst(new_tree)

                tree.left := new_tree
                tree.min := val
            }
        }
    }

    fold bst(tree)
}


// PART 3: Logarithmic runtime upper bound
//
// Prove that `bst_insert` terminates within `h + 1` time units, where `h` is
// the height of the tree.
