// We prove every part of this challenge

// We did not use this function by mistake at first
// But this fucntion provides the same functionality as loc function we used
function array_offset(base: Ref, idx: Int): Ref


// Array
field value: Int // for integer arrays
domain Array {
    function loc(a: Array, i: Int): Ref
    function len(a: Array): Int
    function first(r: Ref): Array
    function second(r: Ref): Int

    axiom injectivity {
        forall a: Array, i: Int :: {loc(a, i)}
        first(loc(a, i)) == a && second(loc(a, i)) == i
    }

    axiom length_nonneg {
        forall a: Array :: len(a) >= 0
    }
}

define lookup(a, i) 
    loc(a, i).value

define update(a, i, e) {
    loc(a, i).value := e
}

define array(a)
    (forall i: Int :: {loc(a, i)}  0 <= i && i < len(a) ==> acc(loc(a, i).value)) 

define arraySeg(a, f, t)
    (forall i: Int :: {loc(a, i)}  f <= i && i < t && i < len(a) ==> acc(loc(a, i).value)) 

define alloc(a, l) {
    inhale array(a) && len(a) == l
}

field content: Array // we hold an array inside the dynamic array
field capacity: Int // this field is the max size of array at the moment
field length: Int // this field is the current size of array at the moment

// PART 1: Dynamic array predicate
//
// Define a predicate for a dynamic array. You may define new fields. You may
// add arguments or heap-based functions for abstraction.
predicate dyn_array(this: Ref, ghost_content: Seq[Int]) {
    acc(this.content) && acc(this.capacity) && acc(this.length) && 
    array(this.content) && len(this.content) == this.capacity &&
    this.length >= 0 && this.length <= this.capacity &&
    this.capacity > 0 && this.length <= len(this.content) &&
    |ghost_content| == this.length && (forall i: Int :: 0 <= i && i < this.length ==> lookup(this.content, i) == ghost_content[i])
}

// PART 2: "Simple" append method
//
// Use the dyn_array predicate you defined to implement a method which appends
// the given value at the end of the dynamic array, assuming the capacity is
// sufficient as a precondition.
method append_nogrow(arr: Ref, val: Int, ghost_content: Seq[Int])
    requires dyn_array(arr, ghost_content)
    requires unfolding dyn_array(arr, ghost_content) in arr.length < arr.capacity
    ensures dyn_array(arr, ghost_content ++ Seq(val))
{
    unfold dyn_array(arr, ghost_content)

    update(arr.content, arr.length, val)
    arr.length := arr.length + 1

    fold dyn_array(arr, ghost_content ++ Seq(val))
}

// PART 3: Resize method
//
// Use the dyn_array predicate you defined to implement a method which
// reallocates the given dynamic array, doubling its capacity and copying over
// its original contents.


function get_capacity(arr: Ref, ghost_content: Seq[Int]): Int 
requires dyn_array(arr, ghost_content)
{
    unfolding dyn_array(arr, ghost_content) in arr.capacity
}
function get_length(arr: Ref, ghost_content: Seq[Int]): Int 
requires dyn_array(arr, ghost_content)
{
    unfolding dyn_array(arr, ghost_content) in arr.length
}

// We ensure the capacity of the new array is double the capacity of the old array
method grow(arr: Ref, ghost_content: Seq[Int])
    returns (new_arr: Ref)
    requires dyn_array(arr, ghost_content)
    requires unfolding dyn_array(arr, ghost_content) in arr.length == len(arr.content)
    ensures dyn_array(new_arr, ghost_content)
    ensures get_capacity(new_arr, ghost_content) == old(get_capacity(arr, ghost_content))*2
{
    unfold dyn_array(arr, ghost_content)

    var new_arr_content : Array 
    alloc(new_arr_content, 2*len(arr.content))
    
    inhale array(new_arr_content)
    
    var index:Int := 0
    while (index < len(arr.content))
        invariant acc(arr.length)
        invariant acc(arr.content)
        invariant array(arr.content)
        invariant array(new_arr_content)
        invariant arr.length == len(arr.content)
        invariant 0 <= index <= arr.length
        invariant len(new_arr_content) == 2*len(arr.content)
    {
        var elem : Int
        elem := lookup(arr.content, index)
        update(new_arr_content, index, elem) 
        index := index + 1
    }

    arr.content := new_arr_content
    arr.capacity := len(new_arr_content)

    fold dyn_array(arr, ghost_content)
    new_arr := arr
}

// We ensure the that the value has been appended to the array
// PART 4: "Full" append method
//
// Using the previous two methods, implement a method which will append a value
// to the given dynamic array, resizing it first if necessary.
method append(arr: Ref, val: Int, ghost_content: Seq[Int])
    returns (new_arr: Ref)
    requires dyn_array(arr, ghost_content)
    ensures dyn_array(new_arr, ghost_content ++ Seq(val))
{
    unfold dyn_array(arr, ghost_content)

    if (arr.length == arr.capacity){
        fold dyn_array(arr, ghost_content)
        new_arr := grow(arr, ghost_content)

        append_nogrow(new_arr, val, ghost_content)
    }
    else{
        fold dyn_array(arr, ghost_content)
        new_arr := arr
        append_nogrow(new_arr, val, ghost_content)
    }
}
