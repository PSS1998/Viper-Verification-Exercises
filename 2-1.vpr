predicate time_credit()
method consume_time_credit()
    requires time_credit()

function math_fib(n: Int): Int
    requires 0 <= n
    ensures 0 <= result
{
    n <= 1 ? n : (math_fib(n - 1) + math_fib(n - 2))
}

domain IntExt {

    function exp(n: Int): Int 
    function log(n: Int): Int

    axiom {
        exp(0) == 1
    }

    axiom {
        forall n:Int :: n >= 0 ==> exp(n+1) == 2 * exp(n)
    }

    axiom {
        forall n:Int :: n >= 0 ==> exp(n) >= 1
    }

    axiom {
        log(1) == 0
    }

    axiom {
        forall n:Int :: n >= 1 ==> log(n) >= 0
    }

    axiom {
        forall n:Int, m:Int :: n >= 1 && m == log(n) ==> exp(m) <= n && n < exp(m+1)
    }
}

// Add time credit annotations to the following method.
//
// Remember to insert consume_time_credit() calls according to the background
// section in the project assignment.
//
// You may define additional functions or lemma methods, you may add ghost
// variables and arguments, and you may augment the method body as you see fit.
// Make sure the functional contract remains intact!
method fib_recursive(n: Int)
    returns (res: Int)
    requires n >= 0
    requires acc(time_credit(), exp(n)/1)
    ensures res == math_fib(n)
{
    consume_time_credit()
    if (n == 0) {
        res := 0
    } elseif (n == 1) {
        res := 1
    } else {
        var sub1: Int
        sub1 := fib_recursive(n - 1)

        var sub2: Int
        sub2 := fib_recursive(n - 2)

        res := sub1 + sub2
    }
}




function math_pow(n: Int, e: Int): Int
    requires 0 <= e
{
    e == 0 ? 1 : n * math_pow(n, e - 1)
}

method lemma_pow(b: Int, y: Int)
    requires 0 <= y
    requires y % 2 == 0
    ensures math_pow(b, y) == math_pow(b * b, y / 2)

method lemma_log_decrease(y: Int)
    requires y > 0
    ensures log((y / 2) + 1) <= log(y + 1) - 1

// Add time credit annotations to the following method.
//
// Remember to insert consume_time_credit() calls according to the background
// section in the project assignment.
//
// You may define additional functions or lemma methods, you may add ghost
// variables and arguments, and you may augment the method body as you see fit.
// Make sure the functional contract remains intact!
method fast_pow(n: Int, e: Int)
    returns (res: Int)
    requires 0 < e
    requires acc(time_credit(), (log(e+1)+1)/1)
    ensures res == math_pow(n, e)
{
    consume_time_credit()

    var b: Int
    var y: Int

    res := 1
    b := n
    y := e
    while (y > 0)
        invariant 0 <= y
        invariant res * math_pow(b, y) == math_pow(n, e)
        invariant acc(time_credit(), (log(y+1))/1)
    {
        consume_time_credit()
        if (y % 2 == 1) {
            lemma_pow(b, y - 1)
            res := res * b
        } else {
            lemma_pow(b, y)
        }
        lemma_log_decrease(y)
        y := y / 2
        b := b * b
    }
}